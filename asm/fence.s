;
; File generated by cc65 v 2.16 - Git e67bbcb
;
	.fopt		compiler,"cc65 v 2.16 - Git e67bbcb"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_on_all
	.import		_pad_poll
	.import		_scroll
	.import		_vram_adr
	.import		_vram_unrle
	.import		_flash
	.import		_shake
	.import		_player_init
	.export		_i
	.export		_j
	.export		_frame
	.export		_gamestate
	.export		_pads
	.export		_oam_ptr
	.export		_player_sprites
	.export		_players
	.export		_bg_bright
	.export		_spr_bright
	.export		_flash_time
	.export		_scroll_x
	.export		_scroll_y
	.export		_shake_time
	.export		_shake_force
	.export		_BG_PALETTES
	.export		_BG_PALETTES_FLASH
	.export		_SPRITE_PALETTES
	.export		_test_map
	.export		_nt_init
	.export		_init
	.export		_update
	.export		_draw
	.export		_main

.segment	"DATA"

_bg_bright:
	.byte	$04
_spr_bright:
	.byte	$04
_flash_time:
	.byte	$00
_scroll_x:
	.byte	$00
_scroll_y:
	.byte	$00
_shake_time:
	.byte	$00
_shake_force:
	.byte	$0A

.segment	"RODATA"

_BG_PALETTES:
	.byte	$00
	.byte	$0F
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$00
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$00
	.byte	$09
	.byte	$19
	.byte	$29
_BG_PALETTES_FLASH:
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$20
_SPRITE_PALETTES:
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$37
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$39
_test_map:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$72
	.byte	$73
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$90
	.byte	$91
	.byte	$00
	.byte	$92
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$81
	.byte	$00
	.byte	$82
	.byte	$83
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$A0
	.byte	$A1
	.byte	$00
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$4E
	.byte	$7C
	.byte	$7D
	.byte	$01
	.byte	$05
	.byte	$7E
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$8C
	.byte	$8D
	.byte	$01
	.byte	$05
	.byte	$8E
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$7C
	.byte	$7D
	.byte	$01
	.byte	$09
	.byte	$7E
	.byte	$4E
	.byte	$7B
	.byte	$01
	.byte	$05
	.byte	$4F
	.byte	$7C
	.byte	$7D
	.byte	$01
	.byte	$09
	.byte	$7E
	.byte	$8C
	.byte	$8D
	.byte	$01
	.byte	$09
	.byte	$8E
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$05
	.byte	$6B
	.byte	$8C
	.byte	$8D
	.byte	$01
	.byte	$09
	.byte	$8E
	.byte	$4E
	.byte	$7B
	.byte	$01
	.byte	$0A
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$05
	.byte	$6B
	.byte	$7B
	.byte	$01
	.byte	$0A
	.byte	$4F
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$0A
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$05
	.byte	$6B
	.byte	$4C
	.byte	$01
	.byte	$0A
	.byte	$6B
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$0A
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$05
	.byte	$6B
	.byte	$4C
	.byte	$01
	.byte	$0A
	.byte	$6B
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$0A
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$05
	.byte	$6B
	.byte	$4C
	.byte	$01
	.byte	$0A
	.byte	$6B
	.byte	$5E
	.byte	$8B
	.byte	$01
	.byte	$0A
	.byte	$5E
	.byte	$8B
	.byte	$01
	.byte	$05
	.byte	$5F
	.byte	$8B
	.byte	$01
	.byte	$0A
	.byte	$5F
	.byte	$00
	.byte	$01
	.byte	$3F
	.byte	$01
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_frame:
	.res	1,$00
_gamestate:
	.res	10,$00
_pads:
	.res	2,$00
_oam_ptr:
	.res	1,$00
_player_sprites:
	.res	8,$00
_players:
	.res	28,$00

; ---------------------------------------------------------------
; void __near__ nt_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nt_init: near

.segment	"CODE"

	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #<(_test_map)
	ldx     #>(_test_map)
	jmp     _vram_unrle

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

	lda     #<(_players)
	ldx     #>(_players)
	jsr     pushax
	lda     #$00
	jsr     _player_init
	lda     #<(_players+14)
	ldx     #>(_players+14)
	jsr     pushax
	lda     #$01
	jmp     _player_init

.endproc

; ---------------------------------------------------------------
; void __near__ update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update: near

.segment	"CODE"

	lda     #$00
	jsr     _pad_poll
	sta     _pads
	lda     #$01
	jsr     _pad_poll
	sta     _pads+1
	lda     _flash_time
	beq     L00F6
	lda     #<(_BG_PALETTES)
	ldx     #>(_BG_PALETTES)
	jsr     pushax
	lda     #<(_BG_PALETTES_FLASH)
	ldx     #>(_BG_PALETTES_FLASH)
	jsr     _flash
	dec     _flash_time
	jmp     L0123
L00F6:	lda     #<(_BG_PALETTES)
	ldx     #>(_BG_PALETTES)
	jsr     _pal_bg
L0123:	lda     _shake_time
	beq     L0125
	lda     _shake_force
	jsr     _shake
	dec     _shake_time
	rts
L0125:	sta     _scroll_x
	sta     _scroll_y
	ldx     #$00
	lda     _scroll_x
	cmp     #$80
	bcc     L010C
	dex
L010C:	jsr     pushax
	ldx     #$00
	lda     _scroll_y
	cmp     #$80
	bcc     L010F
	dex
L010F:	jmp     _scroll

.endproc

; ---------------------------------------------------------------
; void __near__ draw (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw: near

.segment	"CODE"

	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #<(_BG_PALETTES)
	ldx     #>(_BG_PALETTES)
	jsr     _pal_bg
	lda     #<(_SPRITE_PALETTES)
	ldx     #>(_SPRITE_PALETTES)
	jsr     _pal_spr
	jsr     _nt_init
	jsr     _ppu_on_all
	jsr     _init
L0119:	jsr     _ppu_wait_nmi
	jsr     _update
	lda     #$00
	sta     _oam_ptr
	jsr     _draw
	inc     _frame
	jmp     L0119

.endproc

