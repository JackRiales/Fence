;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_on_all
	.import		_pad_poll
	.import		_scroll
	.import		_vram_adr
	.import		_vram_unrle
	.import		_flash
	.import		_shake
	.import		_META_PLAYERONE
	.import		_player_init
	.import		_player_draw
	.export		_i
	.export		_j
	.export		_frame
	.export		_state_main
	.export		_state_title
	.export		_state_battle
	.export		_pads
	.export		_oam_ptr
	.export		_player_sprites
	.export		_players
	.export		_bg_bright
	.export		_spr_bright
	.export		_flash_time
	.export		_scroll_x
	.export		_scroll_y
	.export		_shake_time
	.export		_shake_force
	.export		_BG_PALETTES
	.export		_BG_PALETTES_FLASH
	.export		_SPRITE_PALETTES
	.export		_test_map
	.export		_nt_init
	.export		_init
	.export		_update
	.export		_draw
	.export		_main

.segment	"DATA"

_bg_bright:
	.byte	$04
_spr_bright:
	.byte	$04
_flash_time:
	.byte	$00
_scroll_x:
	.byte	$00
_scroll_y:
	.byte	$00
_shake_time:
	.byte	$00
_shake_force:
	.byte	$0A

.segment	"RODATA"

_BG_PALETTES:
	.byte	$00
	.byte	$0F
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$00
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$00
	.byte	$09
	.byte	$19
	.byte	$29
_BG_PALETTES_FLASH:
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$20
_SPRITE_PALETTES:
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$37
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$39
_test_map:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$72
	.byte	$73
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$90
	.byte	$91
	.byte	$00
	.byte	$92
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$81
	.byte	$00
	.byte	$82
	.byte	$83
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$A0
	.byte	$A1
	.byte	$00
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$4E
	.byte	$7C
	.byte	$7D
	.byte	$01
	.byte	$05
	.byte	$7E
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$8C
	.byte	$8D
	.byte	$01
	.byte	$05
	.byte	$8E
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$7C
	.byte	$7D
	.byte	$01
	.byte	$09
	.byte	$7E
	.byte	$4E
	.byte	$7B
	.byte	$01
	.byte	$05
	.byte	$4F
	.byte	$7C
	.byte	$7D
	.byte	$01
	.byte	$09
	.byte	$7E
	.byte	$8C
	.byte	$8D
	.byte	$01
	.byte	$09
	.byte	$8E
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$05
	.byte	$6B
	.byte	$8C
	.byte	$8D
	.byte	$01
	.byte	$09
	.byte	$8E
	.byte	$4E
	.byte	$7B
	.byte	$01
	.byte	$0A
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$05
	.byte	$6B
	.byte	$7B
	.byte	$01
	.byte	$0A
	.byte	$4F
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$0A
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$05
	.byte	$6B
	.byte	$4C
	.byte	$01
	.byte	$0A
	.byte	$6B
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$0A
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$05
	.byte	$6B
	.byte	$4C
	.byte	$01
	.byte	$0A
	.byte	$6B
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$0A
	.byte	$5B
	.byte	$4C
	.byte	$01
	.byte	$05
	.byte	$6B
	.byte	$4C
	.byte	$01
	.byte	$0A
	.byte	$6B
	.byte	$5E
	.byte	$8B
	.byte	$01
	.byte	$0A
	.byte	$5E
	.byte	$8B
	.byte	$01
	.byte	$05
	.byte	$5F
	.byte	$8B
	.byte	$01
	.byte	$0A
	.byte	$5F
	.byte	$00
	.byte	$01
	.byte	$3F
	.byte	$01
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_i:
	.res	1,$00
.segment	"ZEROPAGE"
_j:
	.res	1,$00
.segment	"ZEROPAGE"
_frame:
	.res	1,$00
.segment	"ZEROPAGE"
_state_main:
	.res	8,$00
.segment	"ZEROPAGE"
_state_title:
	.res	8,$00
.segment	"ZEROPAGE"
_state_battle:
	.res	8,$00
.segment	"ZEROPAGE"
_pads:
	.res	2,$00
.segment	"ZEROPAGE"
_oam_ptr:
	.res	1,$00
.segment	"ZEROPAGE"
_player_sprites:
	.res	8,$00
.segment	"ZEROPAGE"
_players:
	.res	26,$00

; ---------------------------------------------------------------
; void __near__ nt_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nt_init: near

.segment	"CODE"

;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(test_map);
;
	lda     #<(_test_map)
	ldx     #>(_test_map)
	jmp     _vram_unrle

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

;
; for (i = 0; i < NUM_PLAYERS; ++i)
;
	lda     #$00
	sta     _i
L0135:	lda     _i
	cmp     #$02
	bcs     L00E6
;
; player_sprites[i].index_buffer = (u8*) META_PLAYERONE;
;
	ldx     #$00
	lda     _i
	jsr     aslax2
	clc
	adc     #<(_player_sprites)
	sta     ptr1
	txa
	adc     #>(_player_sprites)
	sta     ptr1+1
	lda     #<(_META_PLAYERONE)
	ldy     #$02
	sta     (ptr1),y
	iny
	lda     #>(_META_PLAYERONE)
	sta     (ptr1),y
;
; player_init(&players[i]);
;
	lda     _i
	jsr     pusha0
	lda     #$0D
	jsr     tosmula0
	clc
	adc     #<(_players)
	tay
	txa
	adc     #>(_players)
	tax
	tya
	jsr     _player_init
;
; players[i].sprite = &player_sprites[i];
;
	lda     _i
	jsr     pusha0
	lda     #$0D
	jsr     tosmula0
	clc
	adc     #<(_players)
	sta     ptr1
	txa
	adc     #>(_players)
	sta     ptr1+1
	ldx     #$00
	lda     _i
	jsr     aslax2
	clc
	adc     #<(_player_sprites)
	tay
	txa
	adc     #>(_player_sprites)
	tax
	tya
	ldy     #$03
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; for (i = 0; i < NUM_PLAYERS; ++i)
;
	inc     _i
	jmp     L0135
;
; }
;
L00E6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update: near

.segment	"CODE"

;
; pads[0] = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pads
;
; pads[1] = pad_poll(1);
;
	lda     #$01
	jsr     _pad_poll
	sta     _pads+1
;
; if (flash_time > 0)
;
	lda     _flash_time
	beq     L0100
;
; flash(BG_PALETTES, BG_PALETTES_FLASH);
;
	lda     #<(_BG_PALETTES)
	ldx     #>(_BG_PALETTES)
	jsr     pushax
	lda     #<(_BG_PALETTES_FLASH)
	ldx     #>(_BG_PALETTES_FLASH)
	jsr     _flash
;
; -- flash_time;
;
	dec     _flash_time
;
; else
;
	jmp     L0136
;
; pal_bg(BG_PALETTES);
;
L0100:	lda     #<(_BG_PALETTES)
	ldx     #>(_BG_PALETTES)
	jsr     _pal_bg
;
; if (shake_time > 0)
;
L0136:	lda     _shake_time
	beq     L0138
;
; shake(shake_force);
;
	lda     _shake_force
	jsr     _shake
;
; -- shake_time;
;
	dec     _shake_time
;
; else
;
	rts
;
; scroll_x = 0;
;
L0138:	sta     _scroll_x
;
; scroll_y = 0;
;
	sta     _scroll_y
;
; scroll(scroll_x, scroll_y);
;
	ldx     #$00
	lda     _scroll_x
	cmp     #$80
	bcc     L0116
	dex
L0116:	jsr     pushax
	ldx     #$00
	lda     _scroll_y
	cmp     #$80
	bcc     L0119
	dex
L0119:	jmp     _scroll

.endproc

; ---------------------------------------------------------------
; void __near__ draw (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw: near

.segment	"CODE"

;
; player_draw(&players[0], &oam_ptr);
;
	lda     #<(_players)
	ldx     #>(_players)
	jsr     pushax
	lda     #<(_oam_ptr)
	ldx     #>(_oam_ptr)
	jsr     _player_draw
;
; player_draw(&players[1], &oam_ptr);
;
	lda     #<(_players+13)
	ldx     #>(_players+13)
	jsr     pushax
	lda     #<(_oam_ptr)
	ldx     #>(_oam_ptr)
	jmp     _player_draw

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; pal_bg(BG_PALETTES);
;
	lda     #<(_BG_PALETTES)
	ldx     #>(_BG_PALETTES)
	jsr     _pal_bg
;
; pal_spr(SPRITE_PALETTES);
;
	lda     #<(_SPRITE_PALETTES)
	ldx     #>(_SPRITE_PALETTES)
	jsr     _pal_spr
;
; nt_init();
;
	jsr     _nt_init
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; init();
;
	jsr     _init
;
; ppu_wait_nmi();
;
L012B:	jsr     _ppu_wait_nmi
;
; update();
;
	jsr     _update
;
; oam_ptr = 0;
;
	lda     #$00
	sta     _oam_ptr
;
; draw();
;
	jsr     _draw
;
; ++frame;
;
	inc     _frame
;
; while(1)
;
	jmp     L012B

.endproc

